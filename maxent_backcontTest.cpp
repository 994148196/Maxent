/*
 * Copyright (C) 1998-2016 ALPS Collaboration. See COPYRIGHT.TXT
 * All rights reserved. Use is subject to license terms. See LICENSE.TXT
 * For use in publications, see ACKNOWLEDGE.TXT
 */
#include "maxent.hpp"
#include "gtest/gtest.h"
#include "maxent_backcont.hpp"

inline vector_type getA(){
  vector_type A(500);
  //presaved output from avspec
  //DMFT U=0;beta=8
  A << 2.716325571e-16, 2.919950769e-12, 4.820405358e-09, 1.314374314e-06, 7.516248538e-05, 
      0.001224793405, 0.007759016621, 0.02508049554, 0.05124657184, 0.07743168328, 
      0.09653782066, 0.1069639236, 0.1106268638, 0.1102449434, 0.1079987192, 0.1052727895, 
      0.1028205961, 0.1009918226, 0.09990644278, 0.09956435962, 0.09990789787, 0.1008552287, 
      0.102317383, 0.1042065064, 0.106439639, 0.1089403034, 0.1116390621, 0.1144736133, 
      0.1173886835, 0.1203358247, 0.1232731561, 0.1261650582, 0.1289818251, 0.1316992731, 
      0.1342983146, 0.1367645031, 0.1390875602, 0.1412608973, 0.1432811408, 0.1451476721, 
      0.1468621913, 0.1484283091, 0.1498511734, 0.1511371318, 0.1522934327, 0.153327963, 
      0.1542490232, 0.1550651355, 0.155784885, 0.1564167886, 0.1569691902, 0.1574501788, 
      0.1578675261, 0.158228641, 0.1585405385, 0.158809821, 0.1590426683, 0.159244837, 
      0.1594216652, 0.1595780826, 0.1597186241, 0.1598474463, 0.1599683461, 0.1600847798, 
      0.1601998835, 0.1603164938, 0.1604371675, 0.1605642019, 0.1606996539, 0.1608453582, 
      0.1610029454, 0.161173858, 0.1613593664, 0.1615605837, 0.1617784791, 0.1620138904,
      0.1622675366, 0.1625400277, 0.1628318757, 0.163143503, 0.1634752514, 0.1638273896, 
      0.1642001204, 0.1645935867, 0.1650078781, 0.1654430356, 0.1658990568, 0.1663759003, 
      0.1668734894, 0.1673917161, 0.167930444, 0.1684895117, 0.169068735, 0.1696679096, 
      0.1702868132, 0.1709252073, 0.1715828395, 0.1722594442, 0.1729547448, 0.1736684547, 
      0.1744002782, 0.1751499119, 0.1759170454, 0.1767013623, 0.1775025407, 0.178320254, 
      0.1791541714, 0.1800039586, 0.1808692781, 0.1817497894, 0.1826451501, 0.1835550153, 
      0.1844790385, 0.1854168719, 0.1863681661, 0.1873325707, 0.1883097346, 0.1892993058, 
      0.1903009317, 0.1913142594, 0.1923389354, 0.1933746062, 0.194420918, 0.195477517, 
      0.1965440494, 0.1976201614, 0.1987054994, 0.19979971, 0.2009024399, 0.2020133364, 
      0.2031320467, 0.2042582188, 0.2053915008, 0.2065315414, 0.2076779899, 0.2088304959, 
      0.2099887098, 0.2111522825, 0.2123208656, 0.2134941113, 0.2146716726, 0.2158532033, 
      0.2170383579, 0.2182267919, 0.2194181616, 0.2206121242, 0.2218083379, 0.223006462,
      0.2242061566, 0.2254070833, 0.2266089045, 0.227811284, 0.2290138866, 0.2302163788, 
      0.231418428, 0.2326197032, 0.2338198749, 0.235018615, 0.2362155969, 0.2374104956, 
      0.2386029878, 0.2397927519, 0.240979468, 0.2421628179, 0.2433424854, 0.2445181563, 
      0.245689518, 0.2468562603, 0.2480180749, 0.2491746554, 0.2503256981, 0.2514709009,
      0.2526099646, 0.2537425917, 0.2548684877, 0.2559873601, 0.2570989191, 0.2582028773, 
      0.25929895, 0.2603868553, 0.2614663136, 0.2625370484, 0.2635987858, 0.264651255,
      0.2656941877, 0.2667273188, 0.2677503863, 0.268763131, 0.2697652969, 0.2707566311, 
      0.271736884, 0.2727058091, 0.2736631632, 0.2746087063, 0.275542202, 0.2764634171,
      0.277372122, 0.2782680903, 0.2791510995, 0.2800209303, 0.2808773672, 0.2817201983, 
      0.2825492153, 0.2833642137, 0.2841649927, 0.2849513552, 0.2857231081, 0.2864800619, 
      0.287222031, 0.287948834, 0.288660293, 0.2893562345, 0.2900364885, 0.2907008895, 0.2913492757,
      0.2919814896, 0.2925973775, 0.2931967902, 0.2937795824, 0.294345613, 0.2948947451, 
      0.295426846, 0.2959417873, 0.2964394448, 0.2969196985, 0.2973824328, 0.2978275363,
      0.2982549021, 0.2986644275, 0.2990560141, 0.2994295679, 0.2997849995, 0.3001222237, 
      0.3004411596, 0.300741731, 0.301023866, 0.301287497, 0.3015325611, 0.3017589996,
      0.3019667587, 0.3021557885, 0.3023260441, 0.3024774848, 0.3026100745, 0.3027237816, 
      0.3028185789, 0.3028944439, 0.3029513584, 0.302989309, 0.3030082865, 0.3030082865, 
      0.302989309, 0.3029513584, 0.3028944439, 0.3028185789, 0.3027237816, 0.3026100745, 
      0.3024774848, 0.3023260441, 0.3021557885, 0.3019667587, 0.3017589996, 0.3015325611, 
      0.301287497, 0.301023866, 0.300741731, 0.3004411596, 0.3001222237, 0.2997849995, 
      0.2994295679, 0.2990560141, 0.2986644275, 0.2982549021, 0.2978275363, 0.2973824328, 
      0.2969196985, 0.2964394448, 0.2959417873, 0.295426846, 0.2948947451, 0.294345613, 
      0.2937795824, 0.2931967902, 0.2925973775, 0.2919814896, 0.2913492757, 
      0.2907008895, 0.2900364885, 0.2893562345, 0.288660293, 0.287948834, 0.287222031,
      0.2864800619, 0.2857231081, 0.2849513552, 0.2841649927, 0.2833642137, 0.2825492153, 
      0.2817201983, 0.2808773672, 0.2800209303, 0.2791510995, 0.2782680903, 0.277372122, 
      0.2764634171, 0.275542202, 0.2746087063, 0.2736631632, 0.2727058091, 0.271736884, 
      0.2707566311, 0.2697652969, 0.268763131, 0.2677503863, 0.2667273188, 0.2656941877, 
      0.264651255, 0.2635987858, 0.2625370484, 0.2614663136, 0.2603868553, 0.25929895, 
      0.2582028773, 0.2570989191, 0.2559873601, 0.2548684877, 0.2537425917, 0.2526099645, 
      0.2514709009, 0.2503256981, 0.2491746554, 0.2480180749, 0.2468562603, 0.245689518, 
      0.2445181563, 0.2433424854, 0.2421628179, 0.240979468, 0.2397927519, 0.2386029878, 
      0.2374104956, 0.2362155969, 0.235018615, 0.2338198749, 0.2326197032, 0.231418428, 
      0.2302163788, 0.2290138866, 0.227811284, 0.2266089045, 0.2254070833, 0.2242061566,
      0.223006462, 0.2218083379, 0.2206121242, 0.2194181616, 0.2182267919, 0.2170383579, 
      0.2158532033, 0.2146716726, 0.2134941113, 0.2123208656, 0.2111522825, 0.2099887098, 
      0.2088304959, 0.2076779899, 0.2065315414, 0.2053915008, 0.2042582188, 0.2031320467, 
      0.2020133364, 0.2009024399, 0.19979971, 0.1987054994, 0.1976201614, 0.1965440494, 0.195477517, 
      0.194420918, 0.1933746062, 0.1923389354, 0.1913142594, 0.1903009317, 0.1892993058, 
      0.1883097346, 0.1873325707, 0.1863681661, 0.1854168719, 0.1844790385, 0.1835550153, 
      0.1826451501, 0.1817497894,.1808692781, 0.1800039586, 0.1791541714, 0.178320254, 
      0.1775025407, 0.1767013623, 0.1759170454, 0.1751499119, 0.1744002782, 0.1736684547, 
      0.1729547448, 0.1722594442, 0.1715828395, 0.1709252073, 0.1702868132, 0.1696679096, 
      0.169068735, 0.1684895117, 0.1679304441, 0.1673917161, 0.1668734894, 0.1663759003,
      0.1658990569, 0.1654430356, 0.1650078781, 0.1645935867, 0.1642001204, 0.1638273896,
      0.1634752514, 0.163143503, 0.1628318757, 0.1625400277, 0.1622675366, 0.1620138904, 
      0.1617784791, 0.1615605837, 0.1613593664, 0.161173858, 0.1610029454, 0.1608453582, 
      0.1606996539, 0.1605642019, 0.1604371675, 0.1603164938, 0.1601998835, 0.1600847798,
      0.1599683461, 0.1598474463, 0.1597186241, 0.1595780826, 0.1594216652, 0.159244837, 
      0.1590426683, 0.158809821, 0.1585405385, 0.158228641, 0.1578675261, 0.1574501788, 
      0.1569691902, 0.1564167886, 0.155784885, 0.1550651355, 0.1542490232, 0.153327963, 
      0.1522934327,0.1511371318, 0.1498511734, 0.1484283091, 0.1468621913, 0.1451476721,
      0.1432811408, 0.1412608973, 0.1390875602, 0.1367645031, 0.1342983146, 0.1316992731, 
      0.1289818251,0.1261650582, 0.1232731561, 0.1203358247, 0.1173886835, 0.1144736133,
      0.1116390621, 0.1089403034, 0.106439639, 0.1042065064, 0.102317383, 0.1008552287, 
      0.09990789787,0.09956435962, 0.09990644278, 0.1009918226, 0.1028205961, 0.1052727895,
      0.1079987192, 0.1102449434, 0.1106268638, 0.1069639236, 0.09653782066, 
      0.07743168328, 0.05124657184, 0.02508049554, 0.007759016621, 0.001224793405, 
      7.516248537e-05, 1.314374314e-06, 4.820405357e-09, 2.919950768e-12, 2.716325569e-16;
    return A;

}
TEST(Backcont,FrequencyPHBackcont){
alps::params p;
  MaxEntSimulation::define_parameters(p);
  const int ndat = 15;
  const double beta = 8;
  p["BETA"]=beta;
  p["NDAT"]=ndat;
  p["PARTICLE_HOLE_SYMMETRY"]=true;
  p["DATASPACE"]="frequency";
  p["KERNEL"]="fermionic";
  p["TEXT_OUTPUT"]=false;
  p["BACKCONT"] = false;
  p["NFREQ"] = 500;

  //data from DMFT;U=0;beta=8
  p["X_0"]=-0.58900239090596;
  p["X_1"]=-0.40986302909581;
  p["X_2"]=-0.32440959736089;
  p["X_3"]=-0.26834511172698;
  p["X_4"]=-0.2278124578356;
  p["X_5"]=-0.19711608409901;
  p["X_6"]=-0.173170382827;
  p["X_7"]=-0.15406437082322;
  p["X_8"]=-0.13853122078645;
  p["X_9"]=-0.12569699334634;
  p["X_10"]=-0.1149417307568;
  p["X_11"]=-0.10581568778351;
  p["X_12"]=-0.097986218747872;
  p["X_13"]=-0.09120298645574;
  p["X_14"]=-0.085274608164208;
  p["X_15"]=-0.080052654686189;

  p["SIGMA_0"]=1e-6;
  p["SIGMA_1"]=1e-6;
  p["SIGMA_2"]=1e-6;
  p["SIGMA_3"]=1e-6;
  p["SIGMA_4"]=1e-6;
  p["SIGMA_5"]=1e-6;
  p["SIGMA_6"]=1e-6;
  p["SIGMA_7"]=1e-6;
  p["SIGMA_8"]=1e-6;
  p["SIGMA_9"]=1e-6;
  p["SIGMA_10"]=1e-6;
  p["SIGMA_11"]=1e-6;
  p["SIGMA_12"]=1e-6;
  p["SIGMA_13"]=1e-6;
  p["SIGMA_14"]=1e-6;
  p["SIGMA_15"]=1e-6;

  //setup params given above data
  MaxEntParameters param(p);
  MaxEntParameters * pp = &param;

  //backcontinue saved output
  vector_type A = getA();    
  Backcont bc(pp);
  vector_type G = bc.backcontinue(A);

  //sensibility check
  EXPECT_EQ(G.size(),ndat);

  //check all are <0
  for(int i=0;i<ndat;i++)
    EXPECT_EQ(G(i)<0,true);

  //check high frequency term
  // G(iomega) ~ 1/iomega + ...

  double iwn = (2*(ndat-1)+1)*M_PI/beta;
  double limit = G(ndat-1)*iwn;
  EXPECT_EQ((limit+1)<0.1,true);
}
TEST(Backcont,TauBackcont){
alps::params p;
  MaxEntSimulation::define_parameters(p);
  const int ndat = 26;
  p["BETA"]=8;
  p["NDAT"]=ndat;
  p["PARTICLE_HOLE_SYMMETRY"]=true;
  p["DATASPACE"]="time";
  p["KERNEL"]="fermionic";
  p["TEXT_OUTPUT"]=false;
  p["BACKCONT"] = false;
  p["NFREQ"] = 500;

  //data from DMFT;U=0;beta=8
  p["X_0"]=-0.5;
  p["X_1"]=-0.31968831176465;
  p["X_2"]=-0.22989567294666;
  p["X_3"]=-0.18028809394476;
  p["X_4"]=-0.15025032491734;
  p["X_5"]=-0.13069255038955;
  p["X_6"]=-0.11727844091991;
  p["X_7"]=-0.10777271410719;
  p["X_8"]=-0.10094024798648;
  p["X_9"]=-0.096059700592185;
  p["X_10"]=-0.09269474697556;
  p["X_11"]=-0.090580337980363;
  p["X_12"]=-0.08956408577659;
  p["X_13"]=-0.089576497236633;
  p["X_14"]=-0.090618406660374;
  p["X_15"]=-0.09276112281222;
  p["X_16"]=-0.096159341080863;
  p["X_17"]=-0.10108143619853;
  p["X_18"]=-0.10796902395697;
  p["X_19"]=-0.11755259463163;
  p["X_20"]=-0.13108435868405;
  p["X_21"]=-0.15083404013491;
  p["X_22"]=-0.18121280672505;
  p["X_23"]=-0.23148524272195;
  p["X_24"]=-0.32270252375015;
  p["X_25"]=-0.5;

  p["TAU_0"]=0;
  p["TAU_1"]=0.3203125;
  p["TAU_2"]=0.640625;
  p["TAU_3"]=0.9609375;
  p["TAU_4"]=1.28125;
  p["TAU_5"]=1.6015625;
  p["TAU_6"]=1.921875;
  p["TAU_7"]=2.2421875;
  p["TAU_8"]=2.5625;
  p["TAU_9"]=2.8828125;
  p["TAU_10"]=3.203125;
  p["TAU_11"]=3.5234375;
  p["TAU_12"]=3.84375;
  p["TAU_13"]=4.1640625;
  p["TAU_14"]=4.484375;
  p["TAU_15"]=4.8046875;
  p["TAU_16"]=5.125;
  p["TAU_17"]=5.4453125;
  p["TAU_18"]=5.765625;
  p["TAU_19"]=6.0859375;
  p["TAU_20"]=6.40625;
  p["TAU_21"]=6.7265625;
  p["TAU_22"]=7.046875;
  p["TAU_23"]=7.3671875;
  p["TAU_24"]=7.6875;
  p["TAU_25"]=8;

  p["SIGMA_0"]=1e-6;
  p["SIGMA_1"]=1e-6;
  p["SIGMA_2"]=1e-6;
  p["SIGMA_3"]=1e-6;
  p["SIGMA_4"]=1e-6;
  p["SIGMA_5"]=1e-6;
  p["SIGMA_6"]=1e-6;
  p["SIGMA_7"]=1e-6;
  p["SIGMA_8"]=1e-6;
  p["SIGMA_9"]=1e-6;
  p["SIGMA_10"]=1e-6;
  p["SIGMA_11"]=1e-6;
  p["SIGMA_12"]=1e-6;
  p["SIGMA_13"]=1e-6;
  p["SIGMA_14"]=1e-6;
  p["SIGMA_15"]=1e-6;
  p["SIGMA_16"]=1e-06;
  p["SIGMA_17"]=1e-06;
  p["SIGMA_18"]=1e-06;
  p["SIGMA_19"]=1e-06;
  p["SIGMA_20"]=1e-06;
  p["SIGMA_21"]=1e-06;
  p["SIGMA_22"]=1e-06;
  p["SIGMA_23"]=1e-06;
  p["SIGMA_24"]=1e-06;
  p["SIGMA_25"]=1e-06;



  //setup params given above data
  MaxEntParameters param(p);
  MaxEntParameters * pp = &param;

  //backcontinue saved output
  vector_type A = getA();    
  Backcont bc(pp);
  vector_type G = bc.backcontinue(A);

  //sensibility check
  EXPECT_EQ(G.size(),ndat);

  //check all are <0
  for(int i=0;i<ndat;i++)
    EXPECT_EQ(G(i)<0,true);

  //check high frequency term
  EXPECT_NEAR(G(0) + G(ndat-1),-1,0.01);
}
